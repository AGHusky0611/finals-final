package Server.PlayerSide;


/**
* Server/PlayerSide/_PlayerInterfaceStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from playerinterface.idl
* Friday, May 30, 2025 7:57:44 PM SGT
*/

public class _PlayerInterfaceStub extends org.omg.CORBA.portable.ObjectImpl implements Server.PlayerSide.PlayerInterface
{


  // Authentication
  public String login (String username, String password) throws Server.Exceptions.LostConnectionException, Server.Exceptions.NoSuchUserFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("login", true);
                $out.write_string (username);
                $out.write_string (password);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NoSuchUserFoundException:1.0"))
                    throw Server.Exceptions.NoSuchUserFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return login (username, password        );
            } finally {
                _releaseReply ($in);
            }
  } // login

  public String adminLogin (String username, String password) throws Server.Exceptions.LostConnectionException, Server.Exceptions.NoSuchUserFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("adminLogin", true);
                $out.write_string (username);
                $out.write_string (password);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NoSuchUserFoundException:1.0"))
                    throw Server.Exceptions.NoSuchUserFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return adminLogin (username, password        );
            } finally {
                _releaseReply ($in);
            }
  } // adminLogin

  public void logout (String userId) throws Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("logout", true);
                $out.write_string (userId);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                logout (userId        );
            } finally {
                _releaseReply ($in);
            }
  } // logout

  public String getUsernameByToken (String token) throws Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getUsernameByToken", true);
                $out.write_string (token);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getUsernameByToken (token        );
            } finally {
                _releaseReply ($in);
            }
  } // getUsernameByToken


  // Game Management
  public String guess (String shownWord, int lobbyId, char guessChar, String userId) throws Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("guess", true);
                $out.write_string (shownWord);
                $out.write_long (lobbyId);
                $out.write_char (guessChar);
                $out.write_string (userId);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return guess (shownWord, lobbyId, guessChar, userId        );
            } finally {
                _releaseReply ($in);
            }
  } // guess

  public void prepareNextRound (int lobbyId) throws Server.Exceptions.LostConnectionException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("prepareNextRound", true);
                $out.write_long (lobbyId);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                prepareNextRound (lobbyId        );
            } finally {
                _releaseReply ($in);
            }
  } // prepareNextRound

  public void declareWinner (int lobbyId, String username) throws Server.Exceptions.LostConnectionException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("declareWinner", true);
                $out.write_long (lobbyId);
                $out.write_string (username);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                declareWinner (lobbyId, username        );
            } finally {
                _releaseReply ($in);
            }
  } // declareWinner

  public void returnToLobby (int lobbyId, String username) throws Server.Exceptions.LostConnectionException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("returnToLobby", true);
                $out.write_long (lobbyId);
                $out.write_string (username);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                returnToLobby (lobbyId, username        );
            } finally {
                _releaseReply ($in);
            }
  } // returnToLobby

  public String[] getReturnedPlayers (int lobbyId) throws Server.Exceptions.LostConnectionException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getReturnedPlayers", true);
                $out.write_long (lobbyId);
                $in = _invoke ($out);
                String $result[] = Server.CommonObjects.StringSequenceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getReturnedPlayers (lobbyId        );
            } finally {
                _releaseReply ($in);
            }
  } // getReturnedPlayers


  // For multi-round support
  public boolean startNextRound (String userToken, int lobbyId) throws Server.Exceptions.NotLoggedInException, Server.Exceptions.LostConnectionException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("startNextRound", true);
                $out.write_string (userToken);
                $out.write_long (lobbyId);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return startNextRound (userToken, lobbyId        );
            } finally {
                _releaseReply ($in);
            }
  } // startNextRound

  public String getLobbyHost (String userId, int lobbyId) throws Server.Exceptions.LostConnectionException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getLobbyHost", true);
                $out.write_string (userId);
                $out.write_long (lobbyId);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getLobbyHost (userId, lobbyId        );
            } finally {
                _releaseReply ($in);
            }
  } // getLobbyHost


  // Lobby Management
  public int createLobby (String userId, String lobbyName) throws Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("createLobby", true);
                $out.write_string (userId);
                $out.write_string (lobbyName);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return createLobby (userId, lobbyName        );
            } finally {
                _releaseReply ($in);
            }
  } // createLobby

  public boolean joinLobby (String userId, int lobbyId) throws Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("joinLobby", true);
                $out.write_string (userId);
                $out.write_long (lobbyId);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return joinLobby (userId, lobbyId        );
            } finally {
                _releaseReply ($in);
            }
  } // joinLobby

  public void deleteLobby (String userId, int lobbyID) throws Server.Exceptions.LostConnectionException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("deleteLobby", true);
                $out.write_string (userId);
                $out.write_long (lobbyID);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                deleteLobby (userId, lobbyID        );
            } finally {
                _releaseReply ($in);
            }
  } // deleteLobby

  public void leaveLobby (String userId, int lobbyId) throws Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("leaveLobby", true);
                $out.write_string (userId);
                $out.write_long (lobbyId);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                leaveLobby (userId, lobbyId        );
            } finally {
                _releaseReply ($in);
            }
  } // leaveLobby

  public int removeAllPlayersFromLobby (int lobbyID) throws Server.Exceptions.LostConnectionException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("removeAllPlayersFromLobby", true);
                $out.write_long (lobbyID);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return removeAllPlayersFromLobby (lobbyID        );
            } finally {
                _releaseReply ($in);
            }
  } // removeAllPlayersFromLobby

  public boolean removePlayerFromLobby (String userId, int lobbyId) throws Server.Exceptions.LostConnectionException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("removePlayerFromLobby", true);
                $out.write_string (userId);
                $out.write_long (lobbyId);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return removePlayerFromLobby (userId, lobbyId        );
            } finally {
                _releaseReply ($in);
            }
  } // removePlayerFromLobby

  public String[] getPlayersInLobby (String token, int lobbyId) throws Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getPlayersInLobby", true);
                $out.write_string (token);
                $out.write_long (lobbyId);
                $in = _invoke ($out);
                String $result[] = Server.PlayerSide.PlayerInterfacePackage.StringArrayHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getPlayersInLobby (token, lobbyId        );
            } finally {
                _releaseReply ($in);
            }
  } // getPlayersInLobby

  public boolean startGame (String userToken, int lobbyId) throws Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("startGame", true);
                $out.write_string (userToken);
                $out.write_long (lobbyId);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return startGame (userToken, lobbyId        );
            } finally {
                _releaseReply ($in);
            }
  } // startGame

  public boolean isGameStarted (String userToken, int lobbyId) throws Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isGameStarted", true);
                $out.write_string (userToken);
                $out.write_long (lobbyId);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isGameStarted (userToken, lobbyId        );
            } finally {
                _releaseReply ($in);
            }
  } // isGameStarted

  public boolean closeLobby (String userToken, int lobbyId) throws Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("closeLobby", true);
                $out.write_string (userToken);
                $out.write_long (lobbyId);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return closeLobby (userToken, lobbyId        );
            } finally {
                _releaseReply ($in);
            }
  } // closeLobby

  public int getWaitingDuration (String userToken, int lobbyId) throws Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getWaitingDuration", true);
                $out.write_string (userToken);
                $out.write_long (lobbyId);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getWaitingDuration (userToken, lobbyId        );
            } finally {
                _releaseReply ($in);
            }
  } // getWaitingDuration


  // Leaderboard
  public String[] getLeaderboard (String userId) throws Server.Exceptions.LostConnectionException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getLeaderboard", true);
                $out.write_string (userId);
                $in = _invoke ($out);
                String $result[] = Server.CommonObjects.StringSequenceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getLeaderboard (userId        );
            } finally {
                _releaseReply ($in);
            }
  } // getLeaderboard

  public String[] getLobbyList (String userId) throws Server.Exceptions.LostConnectionException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getLobbyList", true);
                $out.write_string (userId);
                $in = _invoke ($out);
                String $result[] = Server.CommonObjects.StringSequenceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getLobbyList (userId        );
            } finally {
                _releaseReply ($in);
            }
  } // getLobbyList

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:Server/PlayerSide/PlayerInterface:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     com.sun.corba.se.impl.orbutil.IORCheckImpl.check(str, "Server.PlayerSide._PlayerInterfaceStub");
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _PlayerInterfaceStub
