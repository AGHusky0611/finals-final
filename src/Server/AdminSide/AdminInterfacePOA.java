package Server.AdminSide;


/**
* Server/AdminSide/AdminInterfacePOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from AdminInterface.idl
* Wednesday, May 28, 2025 12:20:18 AM AWST
*/

public abstract class AdminInterfacePOA extends org.omg.PortableServer.Servant
 implements AdminInterfaceOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("login", new Integer (0));
    _methods.put ("createPlayer", new Integer (1));
    _methods.put ("editUserDetails", new Integer (2));
    _methods.put ("deleteUser", new Integer (3));
    _methods.put ("getUserList", new Integer (4));
    _methods.put ("searchUser", new Integer (5));
    _methods.put ("changeRules", new Integer (6));
    _methods.put ("getGameHistory", new Integer (7));
    _methods.put ("getPlayerHistory", new Integer (8));
    _methods.put ("ping", new Integer (9));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    Integer __method = (Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // Server/AdminSide/AdminInterface/login
       {
         try {
           Server.CommonInterface.CallBackInterface cb = Server.CommonInterface.CallBackInterfaceHelper.read (in);
           String userId = in.read_string ();
           String password = in.read_string ();
           Server.CommonObjects.User $result = null;
           $result = this.login (cb, userId, password);
           out = $rh.createReply();
           Server.CommonObjects.UserHelper.write (out, $result);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.AlreadyLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.AlreadyLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 1:  // Server/AdminSide/AdminInterface/createPlayer
       {
         try {
           String playerId = in.read_string ();
           String password = in.read_string ();
           this.createPlayer (playerId, password);
           out = $rh.createReply();
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 2:  // Server/AdminSide/AdminInterface/editUserDetails
       {
         try {
           String userId = in.read_string ();
           String password = in.read_string ();
           this.editUserDetails (userId, password);
           out = $rh.createReply();
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotLoggedInExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NoSuchUserFoundException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NoSuchUserFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 3:  // Server/AdminSide/AdminInterface/deleteUser
       {
         try {
           String userId = in.read_string ();
           this.deleteUser (userId);
           out = $rh.createReply();
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotLoggedInExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NoSuchUserFoundException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NoSuchUserFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 4:  // Server/AdminSide/AdminInterface/getUserList
       {
         try {
           Server.CommonObjects.User $result[] = null;
           $result = this.getUserList ();
           out = $rh.createReply();
           usersHelper.write (out, $result);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 5:  // Server/AdminSide/AdminInterface/searchUser
       {
         try {
           String playerId = in.read_string ();
           Server.CommonObjects.User $result = null;
           $result = this.searchUser (playerId);
           out = $rh.createReply();
           Server.CommonObjects.UserHelper.write (out, $result);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotLoggedInExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NoSuchUserFoundException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NoSuchUserFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 6:  // Server/AdminSide/AdminInterface/changeRules
       {
         try {
           int waitingDuration = in.read_long ();
           int gameDuration = in.read_long ();
           Server.CommonObjects.GameRules $result = null;
           $result = this.changeRules (waitingDuration, gameDuration);
           out = $rh.createReply();
           Server.CommonObjects.GameRulesHelper.write (out, $result);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 7:  // Server/AdminSide/AdminInterface/getGameHistory
       {
         try {
           Server.CommonObjects.GameResult $result[] = null;
           $result = this.getGameHistory ();
           out = $rh.createReply();
           playedSessionsHelper.write (out, $result);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 8:  // Server/AdminSide/AdminInterface/getPlayerHistory
       {
         try {
           String playerId = in.read_string ();
           Server.CommonObjects.GameResult $result[] = null;
           $result = this.getPlayerHistory (playerId);
           out = $rh.createReply();
           playedSessionsHelper.write (out, $result);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotLoggedInExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NoSuchUserFoundException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NoSuchUserFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 9:  // Server/AdminSide/AdminInterface/ping
       {
         try {
           String userId = in.read_string ();
           String $result = null;
           $result = this.ping (userId);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:Server/AdminSide/AdminInterface:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public AdminInterface _this() 
  {
    return AdminInterfaceHelper.narrow(
    super._this_object());
  }

  public AdminInterface _this(org.omg.CORBA.ORB orb) 
  {
    return AdminInterfaceHelper.narrow(
    super._this_object(orb));
  }


} // class AdminInterfacePOA
