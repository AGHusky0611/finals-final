package Server.AdminSide;


/**
* Server/AdminSide/_AdminInterfaceStub.java.
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from AdminInterface.idl
* Wednesday, May 28, 2025 12:20:18 AM AWST
*/

public class _AdminInterfaceStub extends org.omg.CORBA.portable.ObjectImpl implements Server.AdminSide.AdminInterface
{

  public Server.CommonObjects.User login (Server.CommonInterface.CallBackInterface cb, String userId, String password) throws Server.Exceptions.LostConnectionException, Server.Exceptions.AlreadyLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("login", true);
                Server.CommonInterface.CallBackInterfaceHelper.write ($out, cb);
                $out.write_string (userId);
                $out.write_string (password);
                $in = _invoke ($out);
                Server.CommonObjects.User $result = Server.CommonObjects.UserHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/AlreadyLoggedInException:1.0"))
                    throw Server.Exceptions.AlreadyLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return login (cb, userId, password        );
            } finally {
                _releaseReply ($in);
            }
  } // login

  public void createPlayer (String playerId, String password) throws Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("createPlayer", true);
                $out.write_string (playerId);
                $out.write_string (password);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                createPlayer (playerId, password        );
            } finally {
                _releaseReply ($in);
            }
  } // createPlayer

  public void editUserDetails (String userId, String password) throws Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException, Server.Exceptions.NoSuchUserFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("editUserDetails", true);
                $out.write_string (userId);
                $out.write_string (password);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NoSuchUserFoundException:1.0"))
                    throw Server.Exceptions.NoSuchUserFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                editUserDetails (userId, password        );
            } finally {
                _releaseReply ($in);
            }
  } // editUserDetails

  public void deleteUser (String userId) throws Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException, Server.Exceptions.NoSuchUserFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("deleteUser", true);
                $out.write_string (userId);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NoSuchUserFoundException:1.0"))
                    throw Server.Exceptions.NoSuchUserFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                deleteUser (userId        );
            } finally {
                _releaseReply ($in);
            }
  } // deleteUser

  public Server.CommonObjects.User[] getUserList () throws Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getUserList", true);
                $in = _invoke ($out);
                Server.CommonObjects.User $result[] = Server.AdminSide.usersHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getUserList (        );
            } finally {
                _releaseReply ($in);
            }
  } // getUserList

  public Server.CommonObjects.User searchUser (String playerId) throws Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException, Server.Exceptions.NoSuchUserFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("searchUser", true);
                $out.write_string (playerId);
                $in = _invoke ($out);
                Server.CommonObjects.User $result = Server.CommonObjects.UserHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NoSuchUserFoundException:1.0"))
                    throw Server.Exceptions.NoSuchUserFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return searchUser (playerId        );
            } finally {
                _releaseReply ($in);
            }
  } // searchUser

  public Server.CommonObjects.GameRules changeRules (int waitingDuration, int gameDuration) throws Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("changeRules", true);
                $out.write_long (waitingDuration);
                $out.write_long (gameDuration);
                $in = _invoke ($out);
                Server.CommonObjects.GameRules $result = Server.CommonObjects.GameRulesHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return changeRules (waitingDuration, gameDuration        );
            } finally {
                _releaseReply ($in);
            }
  } // changeRules

  public Server.CommonObjects.GameResult[] getGameHistory () throws Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getGameHistory", true);
                $in = _invoke ($out);
                Server.CommonObjects.GameResult $result[] = Server.AdminSide.playedSessionsHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getGameHistory (        );
            } finally {
                _releaseReply ($in);
            }
  } // getGameHistory

  public Server.CommonObjects.GameResult[] getPlayerHistory (String playerId) throws Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException, Server.Exceptions.NoSuchUserFoundException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getPlayerHistory", true);
                $out.write_string (playerId);
                $in = _invoke ($out);
                Server.CommonObjects.GameResult $result[] = Server.AdminSide.playedSessionsHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NoSuchUserFoundException:1.0"))
                    throw Server.Exceptions.NoSuchUserFoundExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getPlayerHistory (playerId        );
            } finally {
                _releaseReply ($in);
            }
  } // getPlayerHistory

  public String ping (String userId) throws Server.Exceptions.LostConnectionException, Server.Exceptions.NotLoggedInException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("ping", true);
                $out.write_string (userId);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Server/Exceptions/LostConnectionException:1.0"))
                    throw Server.Exceptions.LostConnectionExceptionHelper.read ($in);
                else if (_id.equals ("IDL:Server/Exceptions/NotLoggedInException:1.0"))
                    throw Server.Exceptions.NotLoggedInExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return ping (userId        );
            } finally {
                _releaseReply ($in);
            }
  } // ping

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:Server/AdminSide/AdminInterface:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     com.sun.corba.se.impl.orbutil.IORCheckImpl.check(str, "Server.AdminSide._AdminInterfaceStub");
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _AdminInterfaceStub
