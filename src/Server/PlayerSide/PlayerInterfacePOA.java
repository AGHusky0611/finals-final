package Server.PlayerSide;


/**
* Server/PlayerSide/PlayerInterfacePOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from playerinterface.idl
* Friday, May 30, 2025 1:40:42 PM SGT
*/

public abstract class PlayerInterfacePOA extends org.omg.PortableServer.Servant
 implements Server.PlayerSide.PlayerInterfaceOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("login", new java.lang.Integer (0));
    _methods.put ("adminLogin", new java.lang.Integer (1));
    _methods.put ("logout", new java.lang.Integer (2));
    _methods.put ("getUsernameByToken", new java.lang.Integer (3));
    _methods.put ("guess", new java.lang.Integer (4));
    _methods.put ("prepareNextRound", new java.lang.Integer (5));
    _methods.put ("declareWinner", new java.lang.Integer (6));
    _methods.put ("returnToLobby", new java.lang.Integer (7));
    _methods.put ("getReturnedPlayers", new java.lang.Integer (8));
    _methods.put ("startNextRound", new java.lang.Integer (9));
    _methods.put ("getLobbyHost", new java.lang.Integer (10));
    _methods.put ("createLobby", new java.lang.Integer (11));
    _methods.put ("joinLobby", new java.lang.Integer (12));
    _methods.put ("deleteLobby", new java.lang.Integer (13));
    _methods.put ("leaveLobby", new java.lang.Integer (14));
    _methods.put ("removeAllPlayersFromLobby", new java.lang.Integer (15));
    _methods.put ("removePlayerFromLobby", new java.lang.Integer (16));
    _methods.put ("getPlayersInLobby", new java.lang.Integer (17));
    _methods.put ("startGame", new java.lang.Integer (18));
    _methods.put ("isGameStarted", new java.lang.Integer (19));
    _methods.put ("closeLobby", new java.lang.Integer (20));
    _methods.put ("getWaitingDuration", new java.lang.Integer (21));
    _methods.put ("getLeaderboard", new java.lang.Integer (22));
    _methods.put ("getLobbyList", new java.lang.Integer (23));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  // Authentication
       case 0:  // Server/PlayerSide/PlayerInterface/login
       {
         try {
           String username = in.read_string ();
           String password = in.read_string ();
           String $result = null;
           $result = this.login (username, password);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NoSuchUserFoundException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NoSuchUserFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 1:  // Server/PlayerSide/PlayerInterface/adminLogin
       {
         try {
           String username = in.read_string ();
           String password = in.read_string ();
           String $result = null;
           $result = this.adminLogin (username, password);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NoSuchUserFoundException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NoSuchUserFoundExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 2:  // Server/PlayerSide/PlayerInterface/logout
       {
         try {
           String userId = in.read_string ();
           this.logout (userId);
           out = $rh.createReply();
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 3:  // Server/PlayerSide/PlayerInterface/getUsernameByToken
       {
         try {
           String token = in.read_string ();
           String $result = null;
           $result = this.getUsernameByToken (token);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }


  // Game Management
       case 4:  // Server/PlayerSide/PlayerInterface/guess
       {
         try {
           String shownWord = in.read_string ();
           int lobbyId = in.read_long ();
           char guessChar = in.read_char ();
           String userId = in.read_string ();
           String $result = null;
           $result = this.guess (shownWord, lobbyId, guessChar, userId);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 5:  // Server/PlayerSide/PlayerInterface/prepareNextRound
       {
         try {
           int lobbyId = in.read_long ();
           this.prepareNextRound (lobbyId);
           out = $rh.createReply();
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 6:  // Server/PlayerSide/PlayerInterface/declareWinner
       {
         try {
           int lobbyId = in.read_long ();
           String username = in.read_string ();
           this.declareWinner (lobbyId, username);
           out = $rh.createReply();
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 7:  // Server/PlayerSide/PlayerInterface/returnToLobby
       {
         try {
           int lobbyId = in.read_long ();
           String username = in.read_string ();
           this.returnToLobby (lobbyId, username);
           out = $rh.createReply();
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 8:  // Server/PlayerSide/PlayerInterface/getReturnedPlayers
       {
         try {
           int lobbyId = in.read_long ();
           String $result[] = null;
           $result = this.getReturnedPlayers (lobbyId);
           out = $rh.createReply();
           Server.CommonObjects.StringSequenceHelper.write (out, $result);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         }
         break;
       }


  // For multi-round support
       case 9:  // Server/PlayerSide/PlayerInterface/startNextRound
       {
         try {
           String userToken = in.read_string ();
           int lobbyId = in.read_long ();
           boolean $result = false;
           $result = this.startNextRound (userToken, lobbyId);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (Server.Exceptions.NotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotLoggedInExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 10:  // Server/PlayerSide/PlayerInterface/getLobbyHost
       {
         try {
           int lobbyId = in.read_long ();
           String $result = null;
           $result = this.getLobbyHost (lobbyId);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         }
         break;
       }


  // Lobby Management
       case 11:  // Server/PlayerSide/PlayerInterface/createLobby
       {
         try {
           String userToken = in.read_string ();
           String lobbyName = in.read_string ();
           int $result = (int)0;
           $result = this.createLobby (userToken, lobbyName);
           out = $rh.createReply();
           out.write_long ($result);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 12:  // Server/PlayerSide/PlayerInterface/joinLobby
       {
         try {
           String userToken = in.read_string ();
           int lobbyId = in.read_long ();
           boolean $result = false;
           $result = this.joinLobby (userToken, lobbyId);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 13:  // Server/PlayerSide/PlayerInterface/deleteLobby
       {
         try {
           int lobbyID = in.read_long ();
           this.deleteLobby (lobbyID);
           out = $rh.createReply();
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 14:  // Server/PlayerSide/PlayerInterface/leaveLobby
       {
         try {
           String userId = in.read_string ();
           int lobbyId = in.read_long ();
           this.leaveLobby (userId, lobbyId);
           out = $rh.createReply();
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 15:  // Server/PlayerSide/PlayerInterface/removeAllPlayersFromLobby
       {
         try {
           int lobbyID = in.read_long ();
           int $result = (int)0;
           $result = this.removeAllPlayersFromLobby (lobbyID);
           out = $rh.createReply();
           out.write_long ($result);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 16:  // Server/PlayerSide/PlayerInterface/removePlayerFromLobby
       {
         try {
           int lobbyId = in.read_long ();
           String username = in.read_string ();
           boolean $result = false;
           $result = this.removePlayerFromLobby (lobbyId, username);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 17:  // Server/PlayerSide/PlayerInterface/getPlayersInLobby
       {
         try {
           String token = in.read_string ();
           int lobbyId = in.read_long ();
           String $result[] = null;
           $result = this.getPlayersInLobby (token, lobbyId);
           out = $rh.createReply();
           Server.PlayerSide.PlayerInterfacePackage.StringArrayHelper.write (out, $result);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 18:  // Server/PlayerSide/PlayerInterface/startGame
       {
         try {
           String userToken = in.read_string ();
           int lobbyId = in.read_long ();
           boolean $result = false;
           $result = this.startGame (userToken, lobbyId);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 19:  // Server/PlayerSide/PlayerInterface/isGameStarted
       {
         try {
           String userToken = in.read_string ();
           int lobbyId = in.read_long ();
           boolean $result = false;
           $result = this.isGameStarted (userToken, lobbyId);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 20:  // Server/PlayerSide/PlayerInterface/closeLobby
       {
         try {
           String userToken = in.read_string ();
           int lobbyId = in.read_long ();
           boolean $result = false;
           $result = this.closeLobby (userToken, lobbyId);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 21:  // Server/PlayerSide/PlayerInterface/getWaitingDuration
       {
         try {
           String userToken = in.read_string ();
           int lobbyId = in.read_long ();
           int $result = (int)0;
           $result = this.getWaitingDuration (userToken, lobbyId);
           out = $rh.createReply();
           out.write_long ($result);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         } catch (Server.Exceptions.NotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.NotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }


  // Leaderboard
       case 22:  // Server/PlayerSide/PlayerInterface/getLeaderboard
       {
         try {
           String userId = in.read_string ();
           String $result[] = null;
           $result = this.getLeaderboard (userId);
           out = $rh.createReply();
           Server.CommonObjects.StringSequenceHelper.write (out, $result);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 23:  // Server/PlayerSide/PlayerInterface/getLobbyList
       {
         try {
           String userId = in.read_string ();
           String $result[] = null;
           $result = this.getLobbyList (userId);
           out = $rh.createReply();
           Server.CommonObjects.StringSequenceHelper.write (out, $result);
         } catch (Server.Exceptions.LostConnectionException $ex) {
           out = $rh.createExceptionReply ();
           Server.Exceptions.LostConnectionExceptionHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:Server/PlayerSide/PlayerInterface:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public PlayerInterface _this() 
  {
    return PlayerInterfaceHelper.narrow(
    super._this_object());
  }

  public PlayerInterface _this(org.omg.CORBA.ORB orb) 
  {
    return PlayerInterfaceHelper.narrow(
    super._this_object(orb));
  }


} // class PlayerInterfacePOA
